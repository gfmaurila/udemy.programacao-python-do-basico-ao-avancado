
ğŸ“Œ DICAS DE COMO TRABALHAR COM AUTOMATION EM PYTHON

---

ğŸ”¹ 1. SELENIUM (AutomaÃ§Ã£o de Navegador Web)

ğŸ“˜ O que Ã©:
Selenium Ã© uma ferramenta que permite automatizar aÃ§Ãµes em navegadores (Chrome, Firefox, etc). Muito usado para testes web e scraping.

ğŸ“„ Exemplo:
from selenium import webdriver
from selenium.webdriver.common.by import By

navegador = webdriver.Chrome()
navegador.get("https://google.com")
navegador.find_element(By.NAME, "q").send_keys("Python Selenium")
navegador.find_element(By.NAME, "q").submit()

navegador.quit()

---

ğŸ”¹ 2. PYTEST (Testes Automatizados Simples e Poderosos)

ğŸ“˜ O que Ã©:
Pytest Ã© um framework para escrever testes com menos cÃ³digo e mais legibilidade. Suporta fixtures, parametrizaÃ§Ã£o e plugins.

ğŸ“„ Exemplo:
def soma(a, b):
    return a + b

def test_soma():
    assert soma(2, 3) == 5
    assert soma(-1, 1) == 0

ğŸ“Œ Para rodar: `pytest nome_do_arquivo.py`

---

ğŸ”¹ 3. UNITTEST (Testes com Biblioteca PadrÃ£o)

ğŸ“˜ O que Ã©:
Unittest Ã© a biblioteca de testes padrÃ£o do Python, baseada em classes.

ğŸ“„ Exemplo:
import unittest

def multiplica(a, b):
    return a * b

class TesteMultiplicacao(unittest.TestCase):
    def test_basico(self):
        self.assertEqual(multiplica(2, 3), 6)
        self.assertEqual(multiplica(0, 10), 0)

if __name__ == '__main__':
    unittest.main()

---

ğŸ’¡ DICA FINAL:
Combine Selenium + Pytest para testes web automatizados de alta qualidade. Use `unittest` quando quiser compatibilidade direta com ferramentas e bibliotecas padrÃ£o do Python.

